#!/usr/bin/env node

var os = require('os');
var fs = require('fs');
var path = require('path');
var util = require('util');
var program = require('commander');
var Application = require('../lib/application');
var mkdirp = require('mkdirp');
var lodash = require('lodash');
var async = require('async');
var prompt = require('prompt');
var validator = require('validator');

var DEFAULT_PATH = '.';
var DEFAULT_PORT = process.env.PORT || 3000;

/**
 * Returns the normalized path where all the apps reside.
 */
var appPath = function (destination) {
  // Default destination.
  if (!lodash.isString(destination)) {
    destination = DEFAULT_PATH;
  }
  return path.normalize(destination);
}

/**
 * Append in a path the applications.json file.
 */
var appSettingsPath = function (dir) {
  return path.join(dir, 'settings.json');
}

/**
 * Starts the application in the specified destination path.
 */
var start = function(destination, prg, callback) {
  var dir = appPath(destination);

  if (!isInstalled(dir)) {
    return install(dir, prg, callback);
  }

  var app = new Application(dir);
  app.start(prg.port, function () {
    if (lodash.isFunction(callback)) {
      callback(dir, app);
    }
  });
};

/**
 * Define if Choko is installed.
 */
var isInstalled = function(dir) {
  // Running from the "applications" directory.
  if (dir == null && fs.existsSync(appSettingsPath(appPath()))) {
    return true;
  }

  // Specified directory.
  return fs.existsSync(appSettingsPath(dir));
}

/**
 * Prepare a structure of directories and files, to run the installer.
 */
var install = function(destination, prg, callback) {
  var dir = appPath(destination);

  if (isInstalled(dir)) {
    return process.stdin.destroy();
  }

  // No destination is defined, so "applications" dir should be default.
  var dirMode = DEFAULT_PATH;
  if (destination != null) {
    dirMode = 'specified';
  }

  program.confirm('No application found on ' + dirMode + ' folder, create a new application on "' + dir + '" path? ', function(ok) {

    if (!ok) {
      return process.stdin.destroy();
    }

    prompt.start();

    var appMachine;

    var schema = {
      properties: {
        appName: {
          description: 'Application name',
          pattern: /^[a-zA-Z0-9\s\-]+$/,
          message: 'Application name must be only letters, spaces, or dashes',
          default: path.basename(dir),
          required: true
        },
        appEmail: {
          description: 'Application email address',
          conform: validator.isEmail,
          message: 'Enter a valid email',
          required: true
        },
        adminName: {
          description: 'Administrator username',
          conform: validator.isAlphanumeric,
          default: 'admin',
          message: 'Enter a valid username e.g. admin',
          required: true
        },
        adminEmail: {
          description: 'Administrator email address',
          conform: validator.isEmail,
          message: 'Enter a valid email',
          required: true
        },
        adminPass: {
          description: 'Administrator password (at least 6 characters)',
          hidden: true,
          conform: function (pass) {
            return validator.isLength(pass, 6);
          },
          message: 'Password must have at least 6 characters.',
          required: true
        },
        database: {
          description: 'Database URI',
          conform: function(uri) {
            return validator.isURL(uri, {
              protocols: ['mongodb'],
              require_protocol: true,
              allow_underscores: true
            });
          },
          default: 'mongodb://localhost/chokoapp',
          message: 'Enter a valid URI for your database e.g. mongodb://localhost/chokoapp',
          required: true
        }

      }
    };

    prompt.get(schema, function (error, result) {

      doInstall({
        application: {
          name: result.appName,
          email: result.appEmail
        },
        database: result.database
      }, destination);

      start(dir, prg, function(dir, app) {
        util.log('Navigate to http://localhost:' + prg.port + ' to start building your new application.');

        // Create the admin user.
        var User = app.type('user');
        var userData = {
          username: result.adminName,
          password: result.adminPass,
          email: result.adminEmail,
          roles: ['administrator']
        };
        User.validateAndSave(userData, function(error, newAccount, errors) {
          // @todo: handle errors.
        });
      });
    });

  });

}

function doInstall(settings, destination) {
  // Create application directories if they don't exist.
  var dir = appPath(destination);
  var folders = [
    dir,
    path.join(dir, '/public'),
    path.join(dir, '/extensions')
  ];
  folders.forEach(function(folder) {
    if (!fs.existsSync(folder)) {
      fs.mkdirSync(folder);
    }
  });

  settings.sessionSecret = 'change-me';

  fs.writeFileSync(path.join(dir, '/settings.json'), JSON.stringify(settings, null, '  '), {flag: 'w'});
}


program
  .command('*')
  .version('0.0.5')
  .usage('[options] [dir]')
  .option('-p, --port <number>', 'start application at specified port', parseInt, DEFAULT_PORT)
  .action(function () {
    var args = Array.prototype.slice.call(arguments);
    if (!lodash.isString(args[0])) {
      args.unshift(DEFAULT_PATH);
    }
    start.apply(this, args);
  });

program
  .command('start')
  .usage('[options] [dir]')
  .description('Start a Choko application.')
  .option('-p, --port <number>', 'start application at specified port', parseInt, DEFAULT_PORT)
  .action(function () {
    var args = Array.prototype.slice.call(arguments);
    if (!lodash.isString(args[0])) {
      args.unshift(DEFAULT_PATH);
    }
    start.apply(this, args);
  });

program.parse(process.argv);
